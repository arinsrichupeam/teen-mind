// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String             @id @default(cuid())
  name          String?
  username      String?            @unique
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile[]
  questions     Questions_Master[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String
  citizenId   String
  prefix      Int
  sex         Int
  firstname   String
  lastname    String
  birthday    DateTime
  ethnicity   String
  nationality String
  tel         String

  address   Address[]
  role      Roles[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Roles {
  id      Int       @id @default(autoincrement())
  name    String
  profile Profile[]
}

model Address {
  id          String  @id @default(cuid())
  profileId   String
  houseNo     String
  villageNo   String
  soi         String
  road        String
  province    Int
  district    Int
  subdistrict Int
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId], map: "Address_profileId_fkey")
}

model Provinces {
  id         Int    @id
  code       Int    @unique(map: "UX_Provinces_Code")
  nameInThai String @db.VarChar(150)
}

model Districts {
  id           Int            @id
  code         Int            @unique(map: "UX_Districts_Code")
  nameInThai   String         @db.VarChar(150)
  provinceId   Int
  zoneId       Int?
  subdistricts Subdistricts[]

  @@index([zoneId], map: "FK_Districts_Zone")
  @@index([provinceId], map: "IX_Districts_ProvinceId")
}

model Subdistricts {
  id         Int       @id
  code       Int       @unique(map: "UX_Subdistricts_Code")
  nameInThai String    @db.VarChar(150)
  districtId Int
  districts  Districts @relation(fields: [districtId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Subdistricts_Districts")

  @@index([districtId], map: "IX_Subdistricts_DistrictId")
}

model Questions_Master {
  id        String           @id @default(cuid())
  userId    String
  referent  String?
  consult   String?
  result    String
  status    Int              @default(0)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  phqa      Questions_PHQA[]
  q2        Questions_2Q[]

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Questions_PHQA {
  id                 String  @id @default(cuid())
  questions_MasterId String?
  q1                 Int
  q2                 Int
  q3                 Int
  q4                 Int
  q5                 Int
  q6                 Int
  q7                 Int
  q8                 Int
  q9                 Int
  sum                Int

  Questions_Master Questions_Master? @relation(fields: [questions_MasterId], references: [id], onDelete: Cascade)

  @@index([questions_MasterId])
}

model Questions_2Q {
  id                 String  @id @default(cuid())
  questions_MasterId String?
  q1                 Int
  q2                 Int

  Questions_Master Questions_Master? @relation(fields: [questions_MasterId], references: [id], onDelete: Cascade)

  @@index([questions_MasterId])
}
